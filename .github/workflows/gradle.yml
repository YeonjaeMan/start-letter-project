name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Create application.properties
      run: |
        PROPERTIES_FILE="src/main/resources/application.properties"
          
        DB_URL="${{ secrets.DB_URL }}"
        USERNAME="${{ secrets.DB_USERNAME }}"
        PW="${{ secrets.DB_PW }}"
          
        echo "spring.datasource.url=${DB_URL}" >> $PROPERTIES_FILE
        echo "spring.datasource.username=${USERNAME}" >> $PROPERTIES_FILE
        echo "spring.datasource.password=${PW}" >> $PROPERTIES_FILE

    - name: Spring Boot Build
      run: ./gradlew clean build --exclude-task test

    - name: docker image build
      run: docker build --platform linux/amd64/v3 -t yeondoit98/shamory_image:latest .

    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: docker hub push
      run: docker push yeondoit98/shamory_image

    - name: get GitHub IP
      id: ip
      uses: haythem/public-ip@v1.2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Add GitHub IP to AWS
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

    - name: AWS EC2 Connection
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        password: ${{ secrets.EC2_PASSWORD }}
        port: ${{ secrets.EC2_SSH_PORT }}
        timeout: 60s
        script: |
          sudo docker stop shamory_image
          sudo docker rm shamory_image
          sudo docker run -it -d -p 8080:8080 --name shamory_image yeondoit98/shamory_image:latest

    - name: Remove IP FROM security group
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32